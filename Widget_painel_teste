<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Leads Ganhos</title>
    <link rel="stylesheet" type="text/css" href="//fonts.googleapis.com/css?family=Open+Sans:400,300&subset=latin,cyrillic-ext">
    <link rel="stylesheet" type="text/css" href='//fonts.googleapis.com/css?family=PT+Sans:400,700&subset=latin,cyrillic-ext'>
    
    <style type="text/css">
    * {
        -webkit-box-sizing: border-box;
        -moz-box-sizing: border-box;
        box-sizing: border-box;
        text-rendering: geometricPrecision;
        -webkit-font-smoothing: antialiased;
    }
    html, body {
        padding: 0;
        margin: 0;
        font-family: 'PT Sans', sans-serif;
        color: #fff;
        background-color: #2E3441;
        height: 100%;
    }
    .cell-wrapper {
        padding: 20px 15px 15px 15px;
        height: 100%;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        background-color: #2E3441;
    }
    .cell-wrapper__caption {
        font-size: 14px;
        color: #A0A7B8;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        margin-bottom: 10px;
    }
    .cell-wrapper__data {
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        justify-content: center;
    }
    .cell-wrapper__data__num {
        font-size: 40px;
        font-weight: 700;
        color: #8B5CF6;
        font-family: 'Open Sans', sans-serif;
        line-height: 1;
        margin-bottom: 5px;
    }
    .cell-wrapper__data__value {
        font-size: 20px;
        color: #fff;
        font-family: 'Open Sans', sans-serif;
    }
    .cell-wrapper__bottom {
        font-size: 12px;
        font-family: 'Open Sans', sans-serif;
        color: #6B7280;
        margin-top: 10px;
    }
    .cell-wrapper__bottom.green {
        color: #41cfc4;
    }
    .cell-wrapper__bottom.red {
        color: #fe6e6e;
    }
    
    /* Loading */
    .loading {
        display: flex;
        align-items: center;
        justify-content: center;
        height: 100%;
    }
    .spinner {
        border: 3px solid rgba(255, 255, 255, 0.1);
        border-radius: 50%;
        border-top: 3px solid #8B5CF6;
        width: 30px;
        height: 30px;
        animation: spin 1s linear infinite;
    }
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    
    /* Error */
    .error {
        color: #fe6e6e;
        font-size: 14px;
        text-align: center;
    }
    </style>
</head>
<body>
    <div id="widget-container" class="loading">
        <div class="spinner"></div>
    </div>

    <script>
        // ====== CONFIGURAÇÃO - SUBSTITUA COM SUA URL DO GAS ======
        const GAS_URL = 'https://script.google.com/macros/s/AKfycbzQFz10-Cs_Gf3Vl_mLvxbAMwljXiSlBYKDhLjIsHyMgTT64Q2d7vdZZASLe8i_2Q1Z/exec';
        
        // Função para obter parâmetros do Kommo
        function getKommoParams() {
            const urlParams = new URLSearchParams(window.location.search);
            
            // Tenta capturar o período do painel
            let dateFrom, dateTo;
            
            // Se vier datas específicas da URL
            if (urlParams.has('date_from') && urlParams.has('date_to')) {
                dateFrom = new Date(parseInt(urlParams.get('date_from')) * 1000);
                dateTo = new Date(parseInt(urlParams.get('date_to')) * 1000);
            } else {
                // Senão, usa o período padrão baseado em kommo_period
                const kommoPeriod = urlParams.get('kommo_period') || 'month';
                const now = new Date();
                
                switch(kommoPeriod) {
                    case 'day':
                        dateFrom = new Date(now.getFullYear(), now.getMonth(), now.getDate());
                        dateTo = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 23, 59, 59);
                        break;
                    case 'week':
                        const firstDayOfWeek = now.getDate() - now.getDay();
                        dateFrom = new Date(now.getFullYear(), now.getMonth(), firstDayOfWeek);
                        dateTo = new Date(now.getFullYear(), now.getMonth(), firstDayOfWeek + 6, 23, 59, 59);
                        break;
                    case 'month':
                    default:
                        dateFrom = new Date(now.getFullYear(), now.getMonth(), 1);
                        dateTo = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59);
                        break;
                }
            }
            
            // Log para debug
            console.log('Parâmetros capturados:', {
                dateFrom: dateFrom.toISOString(),
                dateTo: dateTo.toISOString(),
                userId: urlParams.get('user_id') || null
            });
            
            return {
                dateFrom: dateFrom.toISOString(),
                dateTo: dateTo.toISOString(),
                userId: urlParams.get('user_id') || null
            };
        }
        
        // Função para formatar moeda
        function formatCurrency(value) {
            return new Intl.NumberFormat('pt-BR', {
                style: 'currency',
                currency: 'BRL',
                minimumFractionDigits: 0,
                maximumFractionDigits: 0
            }).format(value);
        }
        
        // Função para formatar período
        function formatPeriod(dateFrom, dateTo) {
            const options = { day: '2-digit', month: '2-digit', year: 'numeric' };
            const from = new Date(dateFrom).toLocaleDateString('pt-BR', options);
            const to = new Date(dateTo).toLocaleDateString('pt-BR', options);
            return `${from} - ${to}`;
        }
        
        // Função para calcular diferença percentual
        function calculateDifference(current, previous) {
            if (previous === 0) return current > 0 ? 100 : 0;
            return Math.round(((current - previous) / previous) * 100);
        }
        
        // Função para carregar dados
        async function loadData() {
            const container = document.getElementById('widget-container');
            const params = getKommoParams();
            
            try {
                // Faz requisição POST para o GAS
                const response = await fetch(GAS_URL, {
                    method: 'POST',
                    mode: 'cors',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(params)
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const data = await response.json();
                
                // Log para debug
                console.log('Dados recebidos do GAS:', data);
                
                // Verifica se há erro nos dados
                if (data.error) {
                    throw new Error(data.message || 'Erro ao buscar dados');
                }
                
                // Renderiza o widget com os dados
                const period = formatPeriod(data.dateFrom || params.dateFrom, data.dateTo || params.dateTo);
                const diffClass = data.difference >= 0 ? 'green' : 'red';
                const diffSymbol = data.difference >= 0 ? '+' : '';
                
                container.className = 'cell-wrapper';
                container.innerHTML = `
                    <div class="cell-wrapper__caption">LEADS GANHOS</div>
                    <div class="cell-wrapper__data">
                        <div class="cell-wrapper__data__num">${data.count || 0}</div>
                        <div class="cell-wrapper__data__value">${formatCurrency(data.totalValue || 0)}</div>
                    </div>
                    <div class="cell-wrapper__bottom">
                        <div style="font-size: 11px; opacity: 0.7">${period}</div>
                    </div>
                `;
                
            } catch (error) {
                console.error('Erro ao carregar dados:', error);
                
                container.className = 'cell-wrapper';
                container.innerHTML = `
                    <div class="error">
                        <strong>Erro ao carregar dados</strong><br>
                        <small>${error.message}</small>
                    </div>
                `;
            }
        }
        
        // Função para recarregar dados periodicamente
        function startAutoRefresh() {
            // Recarrega a cada 5 minutos
            setInterval(loadData, 300000);
        }
        
        // Inicialização
        document.addEventListener('DOMContentLoaded', () => {
            loadData();
            startAutoRefresh();
            
            // Recarrega quando a página volta a ficar visível
            document.addEventListener('visibilitychange', () => {
                if (!document.hidden) {
                    loadData();
                }
            });
        });
    </script>
</body>
</html>
